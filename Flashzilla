//
//  Training.swift
//  Flashzilla
//
//  Created by Shimoorook on 4/9/21.
//

import SwiftUI
import CoreHaptics

struct Training: View {
//    @State private var currentAmount: CGFloat = 0
//    @State private var finalAmount: CGFloat = 1
//    @State private var currentRotationAmount: Angle = .degrees(0)
//    @State private var finalRotationAmount: Angle = .degrees(0)
//    @State private var offset = CGSize.zero
//    @State private var isDragging = false
//    @State private var engine: CHHapticEngine?
    
    func withOptionalAnimation<Result>(_ animation: Animation? = .default, _ body: () throws -> Result) rethrows -> Result {
        if UIAccessibility.isReduceMotionEnabled {
            return try body()
        } else {
            return try withAnimation(animation, body)
        }
    }
//
//    func simpleSuccess() {
//        let generator = UINotificationFeedbackGenerator()
//        generator.notificationOccurred(.success)
//    }
//
//    func prepareHaptics() {
//        guard CHHapticEngine.capabilitiesForHardware().supportsHaptics else { return }
//
//        do {
//            self.engine = try CHHapticEngine()
//            try engine?.start()
//        } catch {
//            print("There was an error creating the engine: \(error.localizedDescription)")
//        }
//    }
    
//    func complexSuccess() {
//        guard CHHapticEngine.capabilitiesForHardware().supportsHaptics else { return }
//        var events = [CHHapticEvent]()
//
//        for i in stride(from: 0, to: 1, by: 0.1) {
//            let intensity = CHHapticEventParameter(parameterID: .hapticIntensity, value: Float(i))
//            let sharpness = CHHapticEventParameter(parameterID: .hapticSharpness, value: Float(i))
//            let event = CHHapticEvent(eventType: .hapticTransient, parameters: [intensity, sharpness], relativeTime: i)
//            events.append(event)
//        }
//
//        for i in stride(from: 0, through: 1, by: 0.1) {
//            let intensity = CHHapticEventParameter(parameterID: .hapticIntensity, value: Float(1 - i))
//            let sharpness = CHHapticEventParameter(parameterID: .hapticSharpness, value: Float(1 - i))
//            let event = CHHapticEvent(eventType: .hapticTransient, parameters: [intensity, sharpness], relativeTime: 1 + i)
//            events.append(event)
//        }
//
////        let intensity = CHHapticEventParameter(parameterID: .hapticIntensity, value: 1)
////        let sharpness = CHHapticEventParameter(parameterID: .hapticSharpness, value: 1)
////        let event = CHHapticEvent(eventType: .hapticTransient, parameters: [intensity, sharpness], relativeTime: 0)
//
//        do {
//            let pattern = try CHHapticPattern(events: events, parameters: [])
//            let player = try engine?.makePlayer(with: pattern)
//            try player?.start(atTime: 0)
//        } catch {
//            print("Failed to play pattern: \(error.localizedDescription)")
//        }
//    }

//    let timer = Timer.publish(every: 1, tolerance: 0.5, on: .main, in: .common).autoconnect()
//    @State private var counter = 0
    
    @Environment(\.accessibilityDifferentiateWithoutColor) var differentiateWithoutColor
    @Environment(\.accessibilityReduceMotion) var reduceMotion
    @Environment(\.accessibilityReduceTransparency) var reduceTransparency
    
    @State private var scale: CGFloat = 1
    
    var body: some View {
        Text("Hello World!")
            .padding()
            .background(reduceTransparency ? Color.black : Color.black.opacity(0.5))
            .foregroundColor(Color.white)
            .clipShape(Capsule())
        
//        Text("Hello World!")
//            .scaleEffect(scale)
//            .onTapGesture {
//                withOptionalAnimation {
//                    self.scale *= 1.5
//                }
//            }
        
//        Text("Hello World!")
//            .scaleEffect(scale)
//            .onTapGesture {
//                if self.reduceMotion {
//                    self.scale *= 1.5
//                } else {
//                    withAnimation {
//                        self.scale *= 1.5
//                    }
//                }
//            }
        
//        HStack {
//            if differentiateWithoutColor {
//                Image(systemName: "checkmark.circle")
//            }
//
//            Text("Success")
//        }
//        .padding()
//        .background(differentiateWithoutColor ? Color.black : Color.green)
//        .foregroundColor(.white)
//        .clipShape(Capsule())
        
//        Text("Hello World!")
//            .onReceive(NotificationCenter.default.publisher(for: UIResponder.keyboardDidShowNotification)) { _ in
//                print("Keyboard Shown")
//            }
//
//            .onReceive(NotificationCenter.default.publisher(for: UIApplication.significantTimeChangeNotification)) { _ in
//                print("Significant time change!")
//            }
//
//            .onReceive(NotificationCenter.default.publisher(for: UIApplication.userDidTakeScreenshotNotification)) { _ in
//                print("User took a screenshot")
//            }
//
//            .onReceive(NotificationCenter.default.publisher(for: UIApplication.willEnterForegroundNotification)) { _ in
//                print("Moving back to the foreground!")
//            }
        
//            .onReceive(NotificationCenter.default.publisher(for: UIApplication.willResignActiveNotification)) { _ in
//                print("Moving to the background!")
//            }
        
//        Text("Hello World!")
//            .onReceive(timer) { time in
//                if self.counter == 5 {
//                    self.timer.upstream.connect().cancel()
//                } else {
//                    print("THe time is now \(time).")
//                }
//                self.counter += 1
//            }
        
        
//        VStack {
//            Text("Hello")
//            Spacer().frame(height: 100)
//            Text("World")
//        }
//        .contentShape(Rectangle())
//        .onTapGesture {
//            print("VStack tapped!")
//        }
        
//        ZStack {
//            Rectangle()
//                .fill(Color.blue)
//                .frame(width: 300, height: 300)
//                .onTapGesture {
//                    print("Rectangle Tapped!")
//                }
//
//            Circle()
//                .fill(Color.red)
//                .frame(width: 300, height: 300)
//                .contentShape(Rectangle())
//                .onTapGesture {
//                    print("Circle Tapped!")
//                }
////                .allowsHitTesting(false)
//        }
        
//        Text("Hello World!")
//            .onAppear(perform: prepareHaptics)
//            .onTapGesture(perform: complexSuccess)
//            .onTapGesture(perform: simpleSuccess)
        
//        let dragGesture = DragGesture()
//            .onChanged { value in self.offset = value.translation }
//            .onEnded { _ in
//                withAnimation {
//                    self.offset = .zero
//                    self.isDragging = false
//                }
//            }
//
//        let pressGesture = LongPressGesture()
//            .onEnded { value in
//                withAnimation {
//                    self.isDragging = true
//                }
//            }
//
//        let combined = pressGesture.sequenced(before: dragGesture)
//
//        return Circle()
//            .fill(Color.red)
//            .frame(width: 64, height: 64)
//            .scaleEffect(isDragging ? 1.5 : 1)
//            .offset(offset)
//            .gesture(combined)
        
//        VStack {
//            Text("Hello World!")
//                .onTapGesture {
//                    print("Text tapped")
//                }
//        }
//        .simultaneousGesture(
//            TapGesture()
//                .onEnded { _ in
//                    print("VStack tapped")
//                }
//        )
//        .highPriorityGesture(
//            TapGesture()
//                .onEnded { _ in
//                    print("VStack tapped")
//                }
//        )
        
//        Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)
//            .rotationEffect(currentRotationAmount + finalRotationAmount)
//            .gesture(
//                RotationGesture()
//                    .onChanged { angle in
//                        self.currentRotationAmount = angle
//                    }
//                    .onEnded { angle in
//                        self.finalRotationAmount += self.currentRotationAmount
//                        self.currentRotationAmount = .degrees(0)
//                    }
//            )
//            .scaleEffect(finalAmount + currentAmount)
//            .gesture(
//                MagnificationGesture()
//                    .onChanged{ amount in
//                        self.currentAmount = amount - 1
//                    }
//                    .onEnded { amount in
//                        self.finalAmount += self.currentAmount
//                        self.currentAmount = 0
//                    }
//            )
//            .onLongPressGesture(minimumDuration: 2, pressing: { inProgress in
//                print("In progress: \(inProgress)!")
//            }) {
//                print("Long pressed!")
//            }
//            .onLongPressGesture(minimumDuration: 2) {
//                print("Long Pressed")
//            }
//            .onTapGesture(count: 2) {
//                print("Double Tap")
//            }
    }
}

struct Training_Previews: PreviewProvider {
    static var previews: some View {
        Training()
    }
}
